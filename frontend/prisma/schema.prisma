// World-class authentication schema for AutoHVAC
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USER & AUTH ====================
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  emailVerified   DateTime?
  password        String?   // Hashed with bcrypt (server-side only)
  name            String?
  image           String?
  
  // Stripe Integration
  stripeCustomerId String?  @unique
  
  // Business Logic
  freeReportUsed  Boolean   @default(false)
  signupMethod    String?   // "magic_link" | "password" | "google"
  
  // Security
  failedLoginAttempts Int      @default(0)
  lockedUntil     DateTime?
  twoFactorEnabled Boolean   @default(false)
  twoFactorSecret String?
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLoginAt     DateTime?
  loginCount      Int       @default(0)
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  projects        Project[]
  subscriptions   Subscription[]
  apiTokens       ApiToken[]
  auditLogs       AuditLog[]
  convertedLeads  Lead[]    @relation("ConvertedLead")
  
  @@index([email])
  @@index([stripeCustomerId])
}

// NextAuth Account (for OAuth providers)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Database Sessions (not JWT)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expires])
}

// Email Verification Tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@index([expires])
}

// ==================== LEADS ====================
model Lead {
  id                String   @id @default(cuid())
  email             String   @unique
  firstReportDate   DateTime @default(now())
  projectId         String?  // Reference to their first project
  marketingConsent  Boolean  @default(false)
  convertedToUserId String?  // When they create an account
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  projects          Project[]
  convertedToUser   User?     @relation("ConvertedLead", fields: [convertedToUserId], references: [id])
  
  @@index([email])
  @@index([convertedToUserId])
}

// ==================== BUSINESS LOGIC ====================
model Project {
  id          String   @id @default(cuid())
  userId      String?  // Null for anonymous uploads and lead projects
  leadEmail   String?  // For lead-associated projects
  anonId      String?  // For claiming after signup
  
  // Blueprint data
  filename    String
  fileSize    Int?
  status      String   // "pending" | "processing" | "completed" | "failed"
  result      Json?
  error       String?
  
  // HVAC Calculations
  heatingTotal Float?
  coolingTotal Float?
  zones        Json?
  
  // Tracking
  uploadedWhileAnonymous Boolean @default(false)
  claimedAt   DateTime?
  pdfReportUrl String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  user        User?    @relation(fields: [userId], references: [id])
  lead        Lead?    @relation(fields: [leadEmail], references: [email])
  
  @@index([anonId])
  @@index([userId])
  @@index([leadEmail])
  @@index([status])
  @@index([createdAt])
}

// ==================== STRIPE & BILLING ====================
model Subscription {
  id                  String   @id @default(cuid())
  userId              String
  stripeCustomerId    String   
  stripeSubscriptionId String  @unique
  stripePriceId       String?
  status              String   // "active" | "canceled" | "past_due" | "trialing"
  currentPeriodEnd    DateTime?
  cancelAtPeriodEnd   Boolean  @default(false)
  
  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([stripeCustomerId])
  @@index([status])
}

// ==================== SECURITY ====================
model PasswordResetToken {
  id         String   @id @default(cuid())
  email      String
  tokenHash  String   @unique  // SHA256 hash of the actual token
  expires    DateTime
  createdAt  DateTime @default(now())
  used       Boolean  @default(false)
  
  @@index([email])
  @@index([expires])
}

model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  ip        String
  userAgent String?
  success   Boolean
  reason    String?  // "invalid_password" | "account_locked" | "email_not_verified"
  createdAt DateTime @default(now())
  
  @@index([email, createdAt])
  @@index([ip, createdAt])
}

model ApiToken {
  id         String   @id @default(cuid())
  userId     String
  name       String
  tokenHash  String   @unique  // SHA256 hash
  lastUsedAt DateTime?
  expiresAt  DateTime?
  scopes     String[] // ["read:projects", "write:projects", etc]
  
  createdAt  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([tokenHash])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  event      String   // "login" | "logout" | "password_change" | "project_upload" | "subscription_created"
  metadata   Json?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
  
  user       User?    @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([event])
  @@index([createdAt])
}