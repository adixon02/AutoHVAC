version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      # Core pipeline_v3 requirements
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PYTHONUNBUFFERED=1
      # Stripe for billing functionality
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PRICE_ID=${STRIPE_PRICE_ID}
      # Local development database (optional - pipeline_v3 uses in-memory jobs)
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://autohvac:autohvac@postgres:5432/autohvac
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - postgres

  # Note: Pipeline V3 handles jobs asynchronously within the web process
  # No separate worker needed for local development
  # Uncomment below if you want to test with separate worker process
  # worker:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.dev
  #   command: ./start_worker.sh
  #   environment:
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - PYTHONUNBUFFERED=1
  #   volumes:
  #     - ./backend:/app

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=autohvac
      - POSTGRES_USER=autohvac
      - POSTGRES_PASSWORD=autohvac
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c 'max_connections=200'

  # Note: Production uses S3 via Render
  # For local development, files are stored temporarily and don't persist

volumes:
  postgres_data: